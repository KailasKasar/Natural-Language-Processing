Naive Bayes algorithm to create a model that can classify dataset SMS messages as spam or not spam.
I am using dataset from UCI machine learning repository https://archive.ics.uci.edu/ml/datasets/SMS+Spam+Collection.
Bayes theorem calculates the probability of a certain event happening(message being spam)
based on the joint probabilistic distributions of certain other events(a message being classified as spam).



# Natural Language Processing

# Importing the libraries
import pandas as pd

# Importing the dataset
dataset = pd.read_table('SMSSpamCollection', sep='\t', 
                   header=None, 
                   names=['label', 'sms_message'])

dataset['label'] = dataset.label.map({'ham':0, 'spam':1})
# Cleaning the texts
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
bag = []
for i in range(0, 5572):
    msg = re.sub('[^a-zA-Z]', ' ', dataset['sms_message'][i])
    msg = msg.lower()
    msg = msg.split()
    ps = PorterStemmer()
    msg = [ps.stem(word) for word in msg if not word in set(stopwords.words('english'))]
    msg = ' '.join(msg)
    bag.append(msg)

# Creating the Bag of Words model
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000)
X = cv.fit_transform(bag).toarray()
y = dataset['label'].values

# Splitting the dataset into the Training set and Test set
from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Fitting Naive Bayes to the Training set

from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB()
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
